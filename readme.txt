# Курсовая работа:
                Парсер Вакансий


Курсовая работа представляет собой проект, который реализует парсер для сбора информации о вакансиях с различных платформ в России. Полученные данные сохраняются в файл, и пользователь может выполнять различные операции, такие как добавление, фильтрация и удаление вакансий.

## Требования к Реализации

Проект состоит из следующих основных компонентов:

### 1. Классы для работы с API сайтов с вакансиями

- Создан абстрактный класс `VacancyAPI`, который содержит методы для работы с конкретными платформами.
- Реализованы классы `HeadHunterAPI` и `SuperJobAPI`, наследующиеся от `VacancyAPI`, для работы с платформами hh.ru и superjob.ru соответственно.
- Классы могут подключаться к API сайтов и получать вакансии.

### 2. Класс для работы с вакансиями

- Создан класс `Vacancy`, который хранит информацию о вакансиях, такую как название, ссылка, зарплата и описание.
- Класс поддерживает методы сравнения вакансий по зарплате и валидации данных, которыми инициализируются его атрибуты.

### 3. Классы для работы с файлами

- Определен абстрактный класс, который обязывает реализовать методы для добавления вакансий в файл, получения данных из файла по указанным критериям и удаления информации о вакансиях.
- Создан класс `JSONSaver` для сохранения информации о вакансиях в JSON-файл.

### 4. Пользовательский интерфейс

- Создана функция `user_interaction()`, которая взаимодействует с пользователем через консоль.
- Пользователю предоставляются сценарии и возможности для работы с вакансиями, такие как выбор платформы, поисковый запрос, фильтрация, сортировка и вывод топ-N вакансий.

### 5. Основная программа

- Основная программа объединяет все классы и функции вместе и позволяет пользователю взаимодействовать с парсером вакансий.

## Поддерживаемые Платформы

- hh.ru (API: [ссылка на документацию](https://github.com/hhru/api))
- superjob.ru (API: [ссылка на документацию](https://api.superjob.ru/))

## Использование Примера

Пример использования парсера:

```python
# Создание экземпляра класса для работы с API сайтов с вакансиями
hh_api = HeadHunterAPI()
superjob_api = SuperJobAPI()

# Получение вакансий с разных платформ
hh_vacancies = hh_api.get_vacancies("Python")
superjob_vacancies = superjob_api.get_vacancies("Python")

# Создание экземпляра класса для работы с вакансиями
vacancy = Vacancy("Python Developer", "<https://hh.ru/vacancy/123456>", "100,000-150,000 руб.", "Требования: опыт работы от 3 лет...")

# Сохранение информации о вакансиях в файл
json_saver = JSONSaver()
json_saver.add_vacancy(vacancy)
json_saver.get_vacancies_by_salary("100,000-150,000 руб.")
json_saver.delete_vacancy(vacancy)

# Функция для взаимодействия с пользователем
def user_interaction():
    platforms = ["HeadHunter", "SuperJob"]
    search_query = input("Введите поисковый запрос: ")
    top_n = int(input("Введите количество вакансий для вывода в топ N: ")
    filter_words = input("Введите ключевые слова для фильтрации вакансий: ").split()
    filtered_vacancies = filter_vacancies(hh_vacancies, superjob_vacancies, filter_words)

    if not filtered_vacancies:
        print("Нет вакансий, соответствующих заданным критериям.")
        return

    sorted_vacancies = sort_vacancies(filtered_vacancies)
    top_vacancies = get_top_vacancies(sorted_vacancies, top_n)
    print_vacancies(top_vacancies)


if __name__ == "__main__":
    user_interaction()
